using System;
using System.Linq;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Security.Cryptography;
using System.Threading.Tasks;
using Beamable.Api.Autogenerated.Content;
using Beamable.Api.Autogenerated.Models;

public class ContentUploader
{
    private readonly HttpClient _httpClient;
    private readonly IContentApi _contentApi;
        
    public ContentUploader(IContentApi contentApi, HttpClient httpClient)
    {
        _httpClient = httpClient;
        _contentApi = contentApi;
    }

    public async Task<string> UploadFromUrl(string url)
    {
        var imageDownloadResponse = await _httpClient.GetAsync(url);
        var image = await imageDownloadResponse.Content.ReadAsByteArrayAsync();

        using var md5 = MD5.Create();
        var md5Bytes = md5.ComputeHash(image);
        var renderChecksum = BitConverter.ToString(md5Bytes).Replace("-", "");
        var saveBinaryResponse = await _contentApi.PostBinary(new SaveBinaryRequest
        {
            binary = new[]
            {
                new BinaryDefinition
                {
                    id = "genamon",
                    checksum = renderChecksum,
                    uploadContentType = "image/png"
                }
            }
        });
                
        var binaryResponse = saveBinaryResponse.binary.First();
        var signedUrl = binaryResponse.uploadUri;

        var content = new ByteArrayContent(image);
        content.Headers.ContentType = new MediaTypeHeaderValue("image/png");
        content.Headers.ContentMD5 = md5Bytes;

        var putContentResponse = await _httpClient.PutAsync(signedUrl, content);
        putContentResponse.EnsureSuccessStatusCode();

        return binaryResponse.uri;
    }
}
